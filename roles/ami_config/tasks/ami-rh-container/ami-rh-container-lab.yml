---
# Test to create a ocp file

- include: ../subscriptions/rh_subscription.yml

- name: This creates a file on the "{{ ami_config }}" AMI so you can check later to see which plays were run.
  file:
    path: /tmp/ami-rh-container-lab
    state: touch

- name: Subscribe to the proper "{{ ami_config }}" repositories
  shell: >
    subscription-manager repos
    --enable="rhel-7-server-rpms"
    --enable="rhel-7-server-optional-rpms"
    --enable="rhel-7-server-extras-rpms"
    --enable="rhel-7-server-ose-3.9-rpms"
  become: true

- name: Add EPEL repository
  command: yum -y install http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
  become: true

- name: update the system prior to doing any work
  yum:
    name: "*"
    state: latest
  become: true

- name: Install packages for the "{{ ami_config }}" AMI
  yum:  
    name: "{{ item }}"
    state: latest
  with_items:
    - wget
    - git
    - net-tools
    - iptables-services
    - docker-latest
    - python-boto3
    - python-boto
    - firewalld
    - atomic-openshift-clients
    - atomic
    - docker
  become: true

- name: Add the Docker group
  group:
    name: docker
    state: present
  become: true

- name: Add ec2-user to the Docker group
  user:
    name: ec2-user
    groups: docker
  become: true

- name: Restart Docker
  service:
    name: docker-latest
    state: restarted
  become: true

- name: Start firewalld
  service:
    name: firewalld
    state: restarted
  become: true

- name: Create the firewalld dockerc zone
  command: firewall-cmd --permanent --new-zone dockerc

- name: Reload the firewalld dockerc zone
  command: firewall-cmd --reload

- name: configure firewalld dockerc zone
  firewalld:
    zone: dockerc
    source: 172.17.0.0/16
    permanent: true
    state: enabled
  become: true

- name: Add tcp ports to dockerc zone
  firewalld:
    port: "{{ item }}"
    permanent: true
    state: enabled
  with_items:
    - 8443/tcp
  become: true

- name: Add udp ports to dockerc zone
  firewalld:
    zone: dockerc
    port: "{{ item }}"
    permanent: true
    state: enabled
  with_items:
    - 53/udp
    - 8053/udp
  become: true

- name: Add tcp ports to public zone
  firewalld:
    zone: public
    port: "{{ item }}"
    permanent: true
    state: enabled
  with_items:
    - 8443/tcp
    - 80/tcp
    - 53/tcp
    - 443/tcp
    - 2379/tcp
    - 2380/tcp
    - 8053/tcp
    - 8443/tcp
    - 8444/tcp
    - 10250/tcp
  become: true

- name: Add udp ports to public zone
  firewalld:
    zone: public
    state: enabled
    permanent: true
    port: "{{ item }}"
  with_items:
    - 53/udp
    - 4789/udp
    - 8053/udp
  become: true

- name: Reload firewalld
  systemd:
    name: firewalld
    state: reloaded
  become: true

- name: Configure sysctl
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present
    reload: yes
  become: true

- name: Clone the git repo
  git:
    repo: 'https://github.com/dustymabe/summit-2018-container-lab'
    dest: /home/ec2-user/summit-2018-container-lab

- name: Move the OC startup scripts to the home directory
  copy:
    src: "{{ item }}"
    dest: /home/ec2-user/
    owner: ec2-user
    group: ec2-user
    mode: 0755
    remote_src: yes
  with_items:
    - /home/ec2-user/summit-2018-container-lab/scripts/host/start-oc.sh
    - /home/ec2-user/summit-2018-container-lab/scripts/host/cleanup-oc.sh
  become: true

- name: Cleanup repo dir
  file:
    path: /home/ec2-user/summit-2018-container-lab
    state: absent

- name: copy over the registries file
  copy:
    src: registries.conf
    dest: /etc/containers/registries.conf
  become: true
  
- name: Restart Docker
  service:
    name: docker-latest
    state: restarted
    enabled: yes
  become: true

- name: Run the script and cache the images
  shell: /home/ec2-user/start-oc.sh
  async: 600
  poll: 0
  register: start_oc

- name: Grab podman and builda repos
  get_url: 
    url: https://copr.fedorainfracloud.org/coprs/baude/Upstream_CRIO_Family/repo/epel-7/baude-Upstream_CRIO_Family-epel-7.repo
    dest: /etc/yum.repos.d/builda.repo

- name: Install podman packages for the "{{ ami_config }}" AMI
  yum:  
    name: "{{ item }}"
    state: latest
  with_items:
    - podman
    - buildah-0.16-git83d7d10.el7.centos
  become: true

- name: Check on image cache task
  async_status: jid={{ start_oc.ansible_job_id }}
  register: cache_result
  until: cache_result.finished
  retries: 300

- name: Cleanup
  shell: /home/ec2-user/cleanup-oc.sh
  ignore_errors: True

- name: Capture the instance ID of this "{{ ami_config }}" so we can attach a volume later
  hosts: localhost
  gather_facts: no
  vars_files:
    - aws_vars.yml
  ec2_instance_facts:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "ami-{{ ami_user }}-{{ ami_unique_id }}.{{ domain_name }}"
  register: result

- debug:
    var: result.instances[0].instance_id
    verbosity: 2

- name: Create an AMI from the configured VM
  hosts: localhost
  gather_facts: yes
  vars_files:
    - aws_vars.yml
  local_action:
    module: ec2_ami
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    instance_id: "{{ result.instances[0].instance_id }}"
    name: "{{ ami_container }}"
    region: "{{ aws_region }}"
    wait: yes
  register: ami_id

- debug:
    var: ami_id.image_id
    verbosity: 2
