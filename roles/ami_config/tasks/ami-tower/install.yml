---
- name: This creates a file on the "{{ ami_config }}" AMI so you can check later to see which plays were run.
  file:
    path: /tmp/ami-tower-test-file
    state: touch

- name: Subscribe to the proper "{{ ami_config }}" repositories
  command: >
    subscription-manager repos
    --enable="rhel-7-server-rpms"
    --enable="rhel-7-server-optional-rpms"
    --enable="rhel-7-server-ose-3.7-rpms"
    --enable="rhel-7-server-extras-rpms"
    --enable="rhel-ha-for-rhel-7-server-htb-rpms"
  become: true

#- name: update the system prior to doing any work
#  yum:
#    name: "*"
#    state: latest
#  become: true

- name: Add EPEL repository
  yum:
    name: http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    state: present
  become: true

- name: Install packages for the "{{ ami_config }}" AMI
  yum:  
    name: "{{ item }}"
    state: present
  with_items: "{{ tower_yum_packages }}"
  become: true

- name: Capture the instance ID of this "{{ ami_config }}" so we can create an AMI later.
  ec2_instance_facts:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ inventory_hostname }}"
  register: ec2_instances

- set_fact:
    instance_id: "{{ ec2_instances.instances[0].instance_id }}"

- debug:
    var: instance_id
    verbosity: 1

- name: Download and extract tower
  unarchive:
    src: "{{ tower_setup_archive }}"
    dest: /home/ec2-user
    remote_src: yes

- name: Copy over the template for the Tower inventory
  template:
    src: tower_config_inventory.j2
    dest: /home/ec2-user/ansible-tower-setup-{{ tower_version }}/inventory
    backup: yes

- name: Run the Tower setup
# TODO look into async to watch process.  it won't output, but it can give process. must add another task to poll.
#   reference the openshift-ansible playbooks for examples
  command: sudo /home/ec2-user/ansible-tower-setup-{{ tower_version }}/setup.sh
  ignore_errors: yes
  become: true
  tags:
    - install

- name: Post Tower license
  uri:
    url: https://{{ inventory_hostname }}/api/v2/config/
    method: POST
    validate_certs: no
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    force_basic_auth: yes
    user: "{{ tower_username }}"
    password: "{{ tower_password }}"
    body: '{{ lookup("file", tower_license) }}'
    body_format: json

- name: See if the sudo escalation is already there
  shell: grep "AWX_PROOT_ENABLED=False" /etc/tower/settings.py
  register: aws_enabled

- name: Enable sudo escalation for Tower
  lineinfile:
    path: /etc/tower/settings.py
    line: "AWX_PROOT_ENABLED=False"
    backup: yes
  when: aws_enabled.stdout != ""
  become: true

- name: Allow 'wheel' group to have passwordless sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%wheel'
    line: '%wheel ALL=(ALL) NOPASSWD: ALL'
    validate: visudo -cf %s
  become: true

- name: Add sudoers users to wheel group
  user:
    name: "{{ item }}"
    groups: wheel
    append: yes
  with_items: 
    - awx
  become: true
...
