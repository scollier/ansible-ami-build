---
- name: Create AWS instance to use as an Ansible control jump host
  hosts: localhost
  gather_facts: no
  strategy: debug
  vars:
    - vm_user: "{{ ami_user }}"
  vars_files:
    - aws_vars.yml
  tasks:
  - name: Provision instance
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ aws_key_name }}"
      group: "{{ aws_sec_group }}"
      instance_type: "{{ ami_inst_type }}"
      image: "{{ rhel_ami_id }}"
      wait: yes
      instance_tags:
        Name: "{{ vm_user }}-ansible-host.{{ domain_name }}"
        vm_user: "{{ vm_user }}"
      vpc_subnet_id: "{{ aws_subnet_id }}"
      zone: "{{ aws_az_1 }}"
      assign_public_ip: yes
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: "{{ ami_root_disk_size }}"
          delete_on_termination: true
      region: "{{ aws_region }}"
      state: present
    register: instance_created

  - debug:
      var: instance_created
      verbosity: 1

  - name: Wait for ssh
    wait_for:
      port: 22
      host: "{{ instance_created.instances.0.public_ip }}"
      timeout: 1000
    ignore_errors: yes

  - add_host:
      hostname: "{{ instance_created.instances.0.tags.Name }}"
      ansible_host: "{{ instance_created.instances.0.public_ip }}"
      public_dns_name: "{{ instance_created.instances.0.public_dns_name }}"
      public_ip: "{{ instance_created.instances.0.public_ip }}"
      groups: ansible_hosts

  - debug:
      var: groups
      verbosity: 1

- name: Create AWS route53 entries for Tower instances
  hosts: ansible_hosts
  gather_facts: no
  vars_files:
    - aws_vars.yml
  vars:
    - ansible_user: ec2-user

  tasks:
    - debug:
        var: hostvars
        verbosity: 1

    - name: Register route53 entries
      local_action:
        module: route53
        command: create
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
        zone: "{{ domain_name }}"
        type: A
        overwrite: True
        ttl: 60
        record: "{{ inventory_hostname }}"
        value: "{{ public_ip }}"
        wait: yes

    - name: Wait for resolvable route53 hostname
      local_action: command host {{ inventory_hostname }}
      register: host_result
      until: host_result.rc == 0
      retries: 60
      delay: 5

    - name: Register with RHN
      redhat_subscription:
        state: present
        username: "{{ rhn_username }}"
        password: "{{ rhn_password }}"
        pool_ids: "{{ rhn_pool_ids }}"
      become: true

    - name: Disable RHUI and only use the Red Hat CDN for content
      command: yum -y erase rh-amazon-rhui-client
      args:
        warn: no
      become: true

    - name: Disable all repos on the system
      command: subscription-manager repos --disable="*"
      become: true

    - name: Subscribe to the proper repositories
      command: >
        subscription-manager repos
        --enable="rhel-7-server-rpms"
        --enable="rhel-7-server-optional-rpms"
        --enable="rhel-7-server-extras-rpms"
        --enable="rhel-ha-for-rhel-7-server-htb-rpms"
      become: true
    
    #- name: update the system prior to doing any work
    #  yum:
    #    name: "*"
    #    state: latest
    #  become: true
    
    - name: Add EPEL repository
      yum:
        name: http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
        state: present
      become: true
    
    - name: Install yum packages
      yum:  
        name: "{{ item }}"
        state: present
      with_items:
        - wget
        - git
        - net-tools
        - bind-utils
        - bash-completion
        - ansible
        - python-boto3
        - python-boto
        - tmux
      become: true
...
